<aside>
    <script>
document.addEventListener("DOMContentLoaded", function () {
    console.log("TOC Highlight Script Loaded");

    const sections = document.querySelectorAll("article [id]");
    console.log("Detected Sections:", [...sections].map(el => el.id));

    const tocLinks = document.querySelectorAll(".right aside ul a");
    console.log("Detected TOC Links:", tocLinks);

    let lastActiveId = null;
    let isManualScroll = false; // FigyeljÃ¼k, hogy kattintÃ¡s vagy gÃ¶rgetÃ©s tÃ¶rtÃ©nt-e

    // IntersectionObserver beÃ¡llÃ­tÃ¡s a gÃ¶rgetÃ©s kÃ¶vetÃ©sÃ©re
    let observer = new IntersectionObserver(entries => {
        if (isManualScroll) return; // Ha Ã©ppen anchorra kattintottunk, ne zavarjuk meg

        let visibleSections = [];

        entries.forEach(entry => {
            console.log(`Checking section: ${entry.target.id}, isIntersecting: ${entry.isIntersecting}, top: ${entry.boundingClientRect.top}`);

            if (entry.isIntersecting) {
                visibleSections.push({
                    id: entry.target.id,
                    top: entry.boundingClientRect.top
                });
            }
        });

        if (visibleSections.length > 0) {
            // Mindig a viewport tetejÃ©hez legkÃ¶zelebbi szakaszt vÃ¡lasszuk aktÃ­vnak
            visibleSections.sort((a, b) => a.top - b.top);
            let activeId = visibleSections[0].id;

            if (activeId === lastActiveId) return; // Ha nem vÃ¡ltozott az aktÃ­v elem, ne frissÃ­tsÃ¼nk

            lastActiveId = activeId;

            console.log("New Active ID:", activeId);

            // TOC frissÃ­tÃ©se
            tocLinks.forEach(link => link.classList.remove("active"));

            tocLinks.forEach(link => {
                let linkHash = new URL(link.href).hash;
                let linkTargetId = linkHash ? linkHash.substring(1) : null;

                if (linkTargetId === activeId) {
                    console.log(`Setting active: ${linkHash}`);
                    link.classList.add("active");
                }
            });
        }
    }, {
        rootMargin: "-150px 0px -60% 0px", // ğŸ”¥ FigyelÃ©si magassÃ¡g feljebb tolva a kattintÃ¡s miatt
        threshold: [0.6] // LegalÃ¡bb 60%-ban lÃ¡thatÃ³nak kell lennie a vÃ¡ltÃ¡shoz
    });

    sections.forEach(section => observer.observe(section));

    // Anchor link kattintÃ¡sra finomÃ­tott gÃ¶rgetÃ©s
    tocLinks.forEach(link => {
        link.addEventListener("click", (event) => {
            event.preventDefault(); // Ne hagyjuk, hogy a bÃ¶ngÃ©szÅ‘ azonnal ugrÃ¡ljon

            const targetId = new URL(link.href).hash.substring(1);
            const targetElement = document.getElementById(targetId);

            if (targetElement) {
                isManualScroll = true; // KijelÃ¶ljÃ¼k, hogy kÃ©zi gÃ¶rgetÃ©s tÃ¶rtÃ©nt

                targetElement.scrollIntoView({ behavior: "smooth", block: "start" });

                // IdÅ‘zÃ­tÃ©s a gÃ¶rgetÃ©s utÃ¡n, hogy az aktÃ­v elem megfelelÅ‘en frissÃ¼ljÃ¶n
                setTimeout(() => {
                    isManualScroll = false; // VisszaÃ¡llÃ­tjuk a gÃ¶rgetÃ©s kÃ¶vetÃ©sÃ©t
                    lastActiveId = targetId;
                    console.log(`Manually setting active: #${targetId}`);

                    tocLinks.forEach(link => link.classList.remove("active"));
                    tocLinks.forEach(link => {
                        if (new URL(link.href).hash.substring(1) === targetId) {
                            link.classList.add("active");
                        }
                    });
                }, 600); // ElÃ©g idÅ‘t hagyunk a scroll befejezÅ‘dÃ©sÃ©re
            }
        });
    });
});
    </script>
    {{#empty(page.contents.outline)}}
    {{/empty(page.contents.outline)}}
    {{^empty(page.contents.outline)}}
    <h4>On this page</h4>
    <ul>
    {{#page.contents.outline}}
        <li class="level-{{level}}">
            <a href="#{{fragment}}">{{text}}</a>
        </li>
    {{/page.contents.outline}}
    </ul>
    {{/empty(page.contents.outline)}}
</aside>
